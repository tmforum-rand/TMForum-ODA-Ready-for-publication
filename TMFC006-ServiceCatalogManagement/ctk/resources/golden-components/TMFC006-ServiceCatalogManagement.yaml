apiVersion: oda.tmforum.org/v1beta3
kind: component
metadata:
  name: components.oda.tmforum.org
spec:
  coreFunction:
    dependentAPIs:
    - apiType: openapi
      id: TMF669
      name: party-role-management-api
      port: 8080
      required: false
      resources:
      - PartyRole:
        - GET
        - GET /id
      specification: https://tmf-open-api-table-documents.s3.eu-west-1.amazonaws.com/ODA/TMF669_v4.0.0.swagger.json
      version: v4.0.0
    - apiType: openapi
      id: TMF632
      name: party-management-api
      port: 8080
      required: false
      resources:
      - individual:
        - GET
        - GET /id
      - organization:
        - GET
        - GET /id
      specification: https://tmf-open-api-table-documents.s3.eu-west-1.amazonaws.com/ODA/TMF632_v4.0.0.swagger.json
      version: v4.0.0
    - apiType: openapi
      id: TMF662
      name: entity-catalog-management-api
      port: 8080
      required: false
      resources:
      - entitySpecification:
        - GET
        - GET /id
      - associationSpecification:
        - GET
        - GET /id
      specification: https://tmf-open-api-table-documents.s3.eu-west-1.amazonaws.com/ODA/TMF662_v4.0.0.swagger.json
      version: v4.0.0
    - apiType: openapi
      id: TMF672
      name: user-role-permission-management-api
      port: 8080
      required: false
      resources:
      - permission:
        - GET
        - GET /id
      specification: https://tmf-open-api-table-documents.s3.eu-west-1.amazonaws.com/ODA/TMF672_v4.0.0.swagger.json
      version: v4.0.0
    exposedAPIs:
    - apiType: openapi
      id: TMF633
      name: service-catalog-management-api
      port: 8080
      required: true
      resources:
      - catalog:
        - GET
        - GET /id
        - POST
        - PATCH
        - DELETE
      - category:
        - GET
        - GET /id
        - POST
        - PATCH
        - DELETE
      - serviceSpecification:
        - GET
        - GET /id
        - POST
        - PATCH
        - DELETE
      - serviceCandidate:
        - GET
        - GET /id
        - POST
        - PATCH
        - DELETE
      - exportJob:
        - POST
        - GET
        - GET /id
        - DELETE
      - importJob:
        - POST
        - GET
        - GET /id
        - DELETE
      specification: https://tmf-open-api-table-documents.s3.eu-west-1.amazonaws.com/ODA/TMF633_v4.0.0.swagger.json
      version: v4.0.0
    - apiType: openapi
      id: TMF657
      name: service-quality-management-api
      port: 8080
      required: true
      resources:
      - serviceLevelSpecification:
        - GET
        - GET/id
        - POST
        - PATCH
        - DELETE
      - serviceLevelObjective:
        - GET
        - GET/id
        - POST
        - PATCH
        - DELETE
      - serviceLevelSpecParameter:
        - GET
        - GET/id
        - POST
        - PATCH
        - DELETE
      specification: https://tmf-open-api-table-documents.s3.eu-west-1.amazonaws.com/ODA/TMF657_v4.0.0.swagger.json
      version: v4.0.0
  description: "\tService Catalog Management component is responsible for organizing\
    \ the collection of service specifications that identify and define all requirements\
    \ of a service that can be performed. Service Catalog Management component has\
    \ the functionality that enable present a customer-facing view so users are able\
    \ to search and select services they need, as well as a technical view to enable\
    \ define and setup what's needed to deliver service specifications (Customer Facing\
    \ Service Specifications (CFSSs) and Resource Facing Service Specifications (RFSSs))\
    \ contained in the service catalog. Service Catalog Management component has functionalities\
    \ that include creation of new service specifications, managing service specifications,\
    \ administering the lifecycle of services, describing relationships between service\
    \ specification attributes, reporting on service specification and their changes,\
    \ and facilitating easy and systematic indexing and access to services, as well\
    \ as facilitate automating the service delivery process."
  eventNotification:
    publishedEvents:
    - apiType: openapi
      hub: /{{.Release.Name}}-{{.Values.component.type}}/tmf-api/ServiceCatalog/hub
      id: TMF633
      implementation: /{{.Release.Name}}-ServiceCatalog
      name: ServiceCatalogManagement
      port: 80
      resources:
      - serviceSpecificationCreateEvent
      - serviceSpecificationChangeEvent
      - serviceSpecificationDeleteEvent
      - serviceCategoryCreateEvent
      - serviceCategoryChangeEvent
      - serviceCategoryDeleteEvent
      - serviceCandidateCreateEvent
      - serviceCandidateChangeEvent
      - serviceCandidateDeleteEvent
      - serviceCatalogCreateEvent
      - serviceCatalogChangeEvent
      - serviceCatalogDeleteEvent
      - serviceCatalogBatchEvent
      specification: https://github.com/tmforum-apis/TMF633_ServiceCatalog/blob/master/TMF633-ServiceCatalog-v4.0.0.swagger.json
    - apiType: openapi
      hub: /{{.Release.Name}}-{{.Values.component.type}}/tmf-api/ServiceQualityManagement/hub
      id: TMF657
      implementation: /{{.Release.Name}}-ServiceQualityManagement
      name: ServiceQualityManagement
      port: 80
      resources:
      - serviceLevelObjectiveCreateEvent
      - serviceLevelObjectiveChangeEvent
      - serviceLevelObjectiveAttributeValueChangeEvent
      - serviceLevelSpecificationCreateEvent
      - serviceLevelSpecificationDeleteEvent
      - serviceLevelSpecificationAttributeValueChangeEvent
      specification: https://github.com/tmforum-apis/TMF657_ServiceQualityManagement/blob/master/TMF657-ServiceQualityManagement-v4.0.0.swagger.json
    - apiType: openapi
      hub: /{{.Release.Name}}-{{.Values.component.type}}/tmf-api/ProcessFlowManagement/hub
      id: TMF701
      implementation: /{{.Release.Name}}-ProcessFlowManagementEvent
      name: ProcessFlowManagement
      port: 80
      resources:
      - processFlowCreateEvent
      - processFlowStateChangeEvent
      - processFlowStateDeleteEvent
      - processFlowStateAttributeValueChangeEvent
      - taskFlowCreateEvent
      - taskFlowStateChangeEvent
      - taskFlowDeleteEvent
      - taskFlowAttributeValueChangeEvent
      - taskFlowInformationRequiredEvent
      specification: https://github.com/tmforum-apis/TMF701_ProcessFlow/blob/master/TMF701-ProcessFlow-v4.1.0.swagger.json
    subscribedEvents:
    - apiType: openapi
      call-back: /{{.Release.Name}}-{{.Values.component.type}}/tmf-api/ResourceCatalog/call-back
      id: TMF634
      implementation: /{{.Release.Name}}-ResourceCatalog
      name: ResourceCatalogManagement
      port: 80
      resources:
      - resourceSpecificationCreateEvent
      - resourceSpecificationChangeEvent
      - resourceSpecificationDeleteEvent
      specification: https://github.com/tmforum-apis/TMF634_ResourceCatalog/blob/master/TMF634-ResourceCatalog-v4.1.0.swagger.json
    - apiType: openapi
      call-back: /{{.Release.Name}}-{{.Values.component.type}}/tmf-api/EntityCatalog/call-back
      id: TMF662
      implementation: /{{.Release.Name}}-EntityCatalog
      name: EntityCatalogManagement
      port: 80
      resources:
      - entitySpecificationCreateEvent
      - entitySpecificationAttributeValueChangeEvent
      - entitySpecificationChangeEvent
      - entitySpecificationDeleteEvent
      specification: https://github.com/tmforum-apis/TMF662_EntityCatalog/blob/master/TMF662-EntityCatalog-v4.0.0.swagger.json
  functionalBlock: Production
  id: TMFC006
  managementFunction:
    exposedAPIs:
    - apiType: prometheus
      implementation: '{{.Release.Name}}-{{.Values.component.name}}-sm'
      name: metrics
      path: /{{.Release.Name}}-{{.Values.component.name}}/metrics
      port: 4000
  name: ServiceCatalogManagement
  owners:
  - email: gaetano.biancardi@accenture.com
    name: Gaetano Biancardi
  publicationDate: 2023-08-18 00:00:00
  securityFunction:
    controllerRole: '{{ .Values.security.controllerRole }}'
    dependentAPIs: []
    exposedAPIs:
    - apiType: openapi
      id: TMF669
      name: party-role-management-api
      port: 8080
      required: true
      resources: []
      specification: https://tmf-open-api-table-documents.s3.eu-west-1.amazonaws.com/ODA/TMF669_v4.0.0.swagger.json
      version: v4.0.0
    secretsManagement:
      podSelector:
        name: '{{ .Values.secretsManagement.podSelector.name }}'
        namespace: '{{ .Values.secretsManagement.podSelector.namespace }}'
        serviceaccount: '{{ .Values.secretsManagement.podSelector.serviceaccount }}'
      sideCar:
        port: 8080
      type: sideCar
  status: specified
  version: 1.1.1
